1.rootfs 			内核空间是kernel，linux刚启动时会加载bootfs文件系统，之后bootfs会被卸载掉。用户空间的我呢加系统时roofts，包含我们熟悉的/dev，/proc,/bin等，目录。
	对base镜像来说，底层直接用Host的kernel，自己只需要提供roofts就行了。注：容器只能使用Host的kernel。
3.通过Dockerfile构建镜像的过程
	1.从base镜像运行一个容器
	2.执行一条指令，对容器做修改。
	3.执行类似dockers commit 的操作；，生成一个新的镜像层
	4.Docker 再基于干干提交的镜像卞一个新容器
	5.重复2-4步，知道Dockerfile中的所有指令执行完毕。
	
	dockerfile常用命令	
	FROM  指定base镜像
	MAINTAINER 	设置进行的作者，可以说任意字符串。
	COPY		将文件从build  context 复制到镜像
				两种格式： COPY  src  dest
							 COPY ["src","dest"]
	ADD			与COPY相似，成build context 复制文件到镜像。不同的时，如果src时归档文件（tar,zip,tgz,xz等），文件会被自动解压到dest。
	ENV			设置环境变量，环境变量可悲后面的只能怪使用。
	EXPOSE		指定容器中的进销存会及那天某个端口，Docker可以将该端口暴露出来。
	VOLUME		将文件或目录声明为volume。
	EORKRE		为后面的RUN,CMD,ENTRYPOINT,ADD或COPY指令设置镜像中的当前工作目录。
	RUN			再容器中运行指定的命令
	CMD			容器启动时运行指定的命令
				可以写多个CMD命令，大致有最后一个生效
	ENTRYOPOINT	设置容器启动时运行制定的命令
3.用dockerHub存取镜像（公网）
		1.首先注册一个账号 （liuchao1994, Lc185******24）
		2.在docker hose上登陆
			docker login -u liuchao1994
			
		3.修改镜像的repositiry使之与docker hub账号匹配，完整格式为[username]/xxx:tag
			docker tag nginx  liuchao1994/nginx:1
		4.通过docker push 将镜像上传到Docker Hub
			docker push liuchao1994/nginx:1
		5.在其他docker host上登陆docker hub  即可下载私有库镜像
4.docker 常用子命令：
		images		显示镜像列表
		history		显示镜像构建历史
		commit		从容器创建新镜像
		build		从Dockerfile 构建进行
		tag			给镜像打tag
		pull		
		push
		rmi			删除host中的镜像，不会删除registry的镜像，如果一个进行对应了多个tag，只有最后一个tag被删除时，进行才被真正的删除。
		search		在命令行中就可以搜索DockerHub中的镜像
5.docker exec -it  ID  bash
  docker logs  -f   ID
6.docker 参数  	--restart=always 意味着无论容器因何种原因退出（包括正常退出），就立即重启
				pause      	docker pause ID  暂停容器
				unpause		docker unpause  ID  退出暂停状态
				kill       	快速停止，可以用start启动kill掉的容器
				docker rm  ID1  ID2    删除容器（批量删除：docker rm -v $(docker ps -aq -f status=exited)）
7.内存限额
		-m或--memory  设置内存的使用xiane
		--memory-swap  设置内存+swap的使用限额
	例子：  docker  run -m 	200M --memory-swap=300M  ubuntu
			允许容器最多使用200M内存和100Mswap。默认情况下，上面两组参数为-1，即对容器内存和swap的使用没有显示	
			
			docker run -it -m 200M --memory-swap=300M  progrium/stress  --vm-bytes  280M 
						--vm 1 ：启动一个内存工作线程
						--vm-bytes 280M:每个线程分配280M内存。
			
		如果在启动容器时只知定-m而不指定--memory-swap，那么--memory-swap默认为-m的两倍，比如
			docker run -it -m 200M ubuntu    容器最多使用200M物理内存和200Mswap
8.CPU设置
	默认情况下，所有容器可以平等的使用host'CPU资源并且没有限制。
	Docker可以通过-c 或--cpu-share设置容器使用CPU的权重。如果不指定，默认值为1024。
	这里通过-c设置的cpu share并不是CPU资源的绝对数量，而是一个相对绝对的权重值。
	例如：
		docker run --name  "coutainer_a" -c 1024 ubuntu
		docker run --name  "coutainer_b" -c 512 ubuntu
		coutainer_a的cpu  share是coutainer_b的两倍。当两个容器都需要CPU资源时，ａ可以得到的CPU是ｂ的两倍。但如果ａ处于空闲状态，这时，ｂ也可以分配到全部可用的CPU。
9.block IO 权重
	block IO指的是磁盘的读写，通过这只权重、显示bps(比特率)和iops（每秒读写次数）的方式控制容器读写磁盘的带宽。
	通过设置--blkio-weight参数来改变容器block IO的优先级。  这里设置的是权重
	设置bps和iops  
		bps是byte per second 每秒读写的数量
		iops是io per second，每秒IO的次数
	可以通过以下参数控制容器的bps和iops：
		--device-read-bps,限制读某个设备的bps
		--device-write-bps,显示写某个设备的bps
		--device-read-iops,限制读某个设备的iops
		--device-write-iops,限制写某个设备的iops
	例子: docker run -it --device-write-bps /dev/sda:30MB  ubuntu
10.cgroup和namespace是最重要的两种技术。cgroup实验资源限额，namespace实现资源隔离。
	cgroup全称control group。Linux系统通过cgroup可以设置进程使用CPU，内存和IO资源的限额。
	
	namespace管理着host中全局唯一的资源，namespace实现了容器间资源的隔离。
		mount namespace  让容器看上去拥有整个文件系统
		UTS namespace让容器有自己的hostname。默认情况下hostname是它的短ID，可以通过-h或---hostname参数设置
		IPC namespace  让容器有自己的共享内存和信号量来实现进程间的通信
		PID namespace  容器在host中以进程的形式运行
		Network namespace  让容器拥有自己独立的网卡、IP、路由等资源
		User namespace   让容器能够管理自己的用户，host不能看到容器中创建的用户
11.docker安装时会创建一个命名为docker0的linux bridge。如果不指定--network ，创建的容器默认都会挂到docekr0上。
		docker network inspect bridge  查看使用的dcoker网络信息
	1.自己可以手动创建桥接的网卡，同时指定网卡的子网地址（subnet）和网关（gateway）
	docker network create --driver bridge --subnet 172.22.16.0/24  --gateway 172.22.16.1  lc2_net
	
	2.使用创建的网卡需要创建容器时手动指定（--network=），并可以指定ip（--ip）
	docker run -it -d --network=lc2_net --ip 172.22.16.9 nginx
	注： 
		指定ip只能对使用--subnet参数的网卡使用。





























			